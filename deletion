#include <iostream>
using namespace std;

class Node{
    public:
    int val;
    Node* prev;
    Node* next;
    Node(int data){
        val=data;
        prev=NULL;
        next=NULL;
    }
};

class doublyLinkedList{
    public:
    Node* head;
    Node* tail;
    
    doublyLinkedList(){
        head=NULL;
        tail=NULL;
    }
    
    void insertAtHead(int data){
        Node* newnode= new Node(data);
        if(head==NULL){
            head= newnode;
            tail= newnode;
            return;
        }
        newnode->next=head;
        head->prev= newnode;
        
        head= newnode;
    }
    
    void insertAtTail(int data){
        Node* newnode= new Node(data);
         if(tail==NULL){
            head= newnode;
            tail= newnode;
            return;
        }
        newnode->prev=tail;
        tail->next= newnode;
        
        tail= newnode;
    }
    
    void insertAtK(int data, int k){
        Node* temp=head;
        while(k){
            temp=temp->next;
            k--;
        }
        Node* newnode= new Node(data);
        newnode->next= temp->next;
        temp->next= newnode;
        newnode->prev= temp;
        newnode->next->prev= newnode;
    }
    
    void display(){
        Node*temp = head;
        cout<<"NULL <- ";
        while(temp->next!=NULL){
            cout<<temp->val<<" <-> ";
            temp=temp->next;
        }
        cout<<temp->val<<" -> NULL\n";
    }
    
    void deleteAtHead(){
        if (head==NULL){
            return;
        }
        Node* temp=head;
        head= temp->next;
        
        if (head==NULL){
            tail=NULL;
        }
        else{
            head->prev=NULL;
        }
        
        free(temp);
    }
    
    void deleteAtTail(){
        if (head==NULL){
            return;
        }
        Node* temp=tail;
        tail= temp->prev;
        
        if (tail==NULL){
            head=NULL;
        }
        else{
            tail->next=NULL;
        }
        
        free(temp);
    }
    
    void deleteAtK(int k){
        Node* temp=head;
        while(k){
            temp=temp->next;
            k--;
        }
        
        temp->prev->next=temp->next;
        temp->next->prev= temp->prev;
        free(temp);
    }
};

int main() {
    doublyLinkedList l1;
    l1.insertAtHead(3);
    l1.insertAtHead(2);
    l1.insertAtHead(1);
    l1.insertAtHead(0);
    l1.insertAtTail(4);
    l1.insertAtTail(5);
    l1.insertAtTail(6);
    l1.display();
    
    l1.insertAtK(30,3);
    l1.display();
    
    l1.deleteAtHead();
    l1.display();
    
    l1.deleteAtTail();
    l1.display();
    
    l1.deleteAtK(3);
    l1.display();

    return 0;
}
